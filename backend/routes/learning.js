const express = require('express');
const { authenticateToken } = require('./auth');

const router = express.Router();

// InputHandler class
class InputHandler {
    constructor() {
        this.systemPrompt = `You are a personal learning assistant that helps users learn the topics that they want. 

There will be 5 input boxes that you will learn from:
Input box 1: what topic user wants to learn about
Input box 2: what is their desired goal
Input box 3: what is User's current level of understanding on the topic
Input box 4: optional input of source document
Input box 5: learning style

Learning styles are: Flashcards, Practice Quizzes, Study Guide, Practice Assignments

Use the inputs from these boxes to help the user learn.

If learning style is Flashcards: Create clear question-answer pairs that help memorize key concepts
If learning style is Practice Quizzes: Create test questions that assess knowledge on the topic
If learning style is Study Guide: Create a comprehensive but clear study guide that presents the information
If learning style is Practice Assignments: Create assignments with practice problems to learn by doing

Always prioritize the source document content when provided, then supplement with your knowledge of the topic.`;
    }

    formatPrompt(userInputs) {
        let prompt = this.systemPrompt + "\n\nUser Inputs:\n";
        
        prompt += `Topic: ${userInputs.topic}\n`;
        prompt += `Goal: ${userInputs.goal}\n`;
        prompt += `Current Level: ${userInputs.level}\n`;
        prompt += `Learning Style: ${userInputs.learningStyle}\n`;
        
        if (userInputs.sourceDocument && userInputs.sourceDocument.trim()) {
            prompt += `Source Document: ${userInputs.sourceDocument}\n`;
            prompt += "\nPlease base your learning material primarily on the provided source document, supplemented with additional relevant information as needed.\n";
        }
        
        return prompt;
    }

    async generateLearningMaterial(userInputs, userId) {
        try {
            const prompt = this.formatPrompt(userInputs);
            
            // Call LLM service
            const llmResponse = await this.callLLMService(prompt);
            
            // Generate unique session ID
            const sessionId = this.generateSessionId();
            
            // Store in database
            const learningSession = {
                sessionId: sessionId,
                userId: userId,
                inputs: userInputs,
                content: llmResponse,
                createdAt: new Date(),
                learningStyle: userInputs.learningStyle
            };
            
            await this.storeLearningSession(learningSession);
            
            return {
                sessionId: sessionId,
                content: llmResponse,
                success: true
            };
            
        } catch (error) {
            console.error('Error generating learning material:', error);
            throw error;
        }
    }

    async callLLMService(prompt) {
        // TODO: Replace with actual AWS Bedrock or other LLM service
        // For now, return a structured placeholder response
        
        const placeholderContent = {
            flashcards: [
                {
                    question: "Sample Question 1",
                    answer: "Sample Answer 1"
                },
                {
                    question: "Sample Question 2", 
                    answer: "Sample Answer 2"
                }
            ],
            quiz: [
                {
                    question: "Sample Quiz Question?",
                    options: ["A) Option 1", "B) Option 2", "C) Option 3", "D) Option 4"],
                    correct: "A"
                }
            ],
            studyGuide: "This is a sample study guide that will be generated by the LLM...",
            assignment: "This is a sample practice assignment that will be generated by the LLM..."
        };
        
        return {
            type: 'learning_material',
            content: placeholderContent,
            timestamp: new Date()
        };
    }

    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    async storeLearningSession(session) {
        // TODO: Integrate with AWS Aurora database
        console.log('Storing learning session:', session.sessionId);
        
        // Placeholder for database storage
        // Example SQL query structure:
        /*
        const query = `
            INSERT INTO learning_sessions (session_id, user_id, topic, goal, level, learning_style, source_document, content, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;
        */
    }

    async getLearningSession(sessionId, userId) {
        // TODO: Retrieve from AWS Aurora
        console.log('Retrieving session:', sessionId, 'for user:', userId);
        
        // Placeholder return
        return {
            sessionId,
            userId,
            content: { type: 'placeholder' },
            createdAt: new Date()
        };
    }

    async getUserSessions(userId) {
        // TODO: Query Aurora for all user sessions
        console.log('Getting all sessions for user:', userId);
        
        // Placeholder return
        return [];
    }
}

// Create InputHandler instance
const inputHandler = new InputHandler();

// Generate learning material endpoint
router.post('/generate-learning-material', authenticateToken, async (req, res) => {
    try {
        const { topic, goal, level, sourceDocument, learningStyle } = req.body;
        
        // Validate required fields
        if (!topic || !goal || !level || !learningStyle) {
            return res.status(400).json({ message: 'Missing required fields' });
        }
        
        const userInputs = {
            topic,
            goal,
            level,
            sourceDocument: sourceDocument || '',
            learningStyle
        };
        
        const result = await inputHandler.generateLearningMaterial(userInputs, req.user.id);
        
        res.json(result);
        
    } catch (error) {
        console.error('Generate learning material error:', error);
        res.status(500).json({ message: 'Failed to generate learning material' });
    }
});

// Get learning session
router.get('/learning-session/:sessionId', authenticateToken, async (req, res) => {
    try {
        const { sessionId } = req.params;
        const session = await inputHandler.getLearningSession(sessionId, req.user.id);
        
        if (!session) {
            return res.status(404).json({ message: 'Session not found' });
        }
        
        res.json(session);
        
    } catch (error) {
        console.error('Get session error:', error);
        res.status(500).json({ message: 'Failed to retrieve session' });
    }
});

// Get user's all sessions
router.get('/user-sessions', authenticateToken, async (req, res) => {
    try {
        const sessions = await inputHandler.getUserSessions(req.user.id);
        res.json(sessions);
        
    } catch (error) {
        console.error('Get user sessions error:', error);
        res.status(500).json({ message: 'Failed to retrieve sessions' });
    }
});

module.exports = router;